# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11JzQAh4WUHD66vN2GTpYM1ljw85y3b7E
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Set Streamlit Page Configuration
st.set_page_config(page_title="Data Analysis Dashboard", layout="wide")

# Sidebar Navigation
st.sidebar.title("üìå Navigation")
sections = [
    "1Ô∏è‚É£ Upload File",
    "2Ô∏è‚É£ Data Information",
    "3Ô∏è‚É£ Exploratory Data Analysis (EDA)"
]
selected_section = st.sidebar.radio("Go to:", sections)

# -------------------- 1Ô∏è‚É£ Upload File --------------------
if selected_section == "1Ô∏è‚É£ Upload File":
    st.title("üìÇ Upload Dataset")
    uploaded_file = st.file_uploader("Upload a CSV or Excel file", type=["csv", "xlsx"])

    if uploaded_file:
        file_extension = uploaded_file.name.split(".")[-1]
        if file_extension == "csv":
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        st.session_state["df"] = df  # Save dataset in session state
        st.success("‚úÖ File Uploaded Successfully!")

# -------------------- Load Dataset (Persistent) --------------------
if "df" in st.session_state:
    df = st.session_state["df"]
else:
    df = None

# -------------------- 2Ô∏è‚É£ Data Information --------------------
if selected_section == "2Ô∏è‚É£ Data Information" and df is not None:
    st.title("üìÑ Data Information")
    st.write("### üîç Data Preview:")
    st.dataframe(df.head())
    st.write(f"**üìä Shape:** {df.shape[0]} rows, {df.shape[1]} columns")
    st.write("**üî¢ Column Data Types:")
    st.write(df.dtypes)
    st.write("**‚ùó Missing Values:")
    st.write(df.isnull().sum())

    st.write("### üîç Summary Statistics:")
    st.write(df.describe())

# -------------------- 3Ô∏è‚É£ Exploratory Data Analysis (EDA) --------------------
if selected_section == "3Ô∏è‚É£ Exploratory Data Analysis (EDA)" and df is not None:
    st.title("üîé Exploratory Data Analysis")

    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()

    st.write(f"üìå **Categorical Columns:** {categorical_cols}")
    st.write(f"üìå **Numerical Columns:** {numerical_cols}")

    st.write("### üìä Select a Graph to Visualize Data")
    graph_type = st.selectbox("Choose Graph Type", ["Bar Chart", "Boxplot", "Line Plot", "Scatter Plot", "Histogram"])

    try:
        if graph_type == "Bar Chart" and categorical_cols:
            column = st.selectbox("Select a Categorical Column", categorical_cols)
            fig = px.bar(df[column].value_counts().reset_index(), x="index", y=column, title=f"Bar Chart of {column}")
            st.plotly_chart(fig)

        elif graph_type == "Boxplot" and numerical_cols:
            column = st.selectbox("Select a Numerical Column", numerical_cols)
            fig = px.box(df, y=column, title=f"Boxplot of {column}")
            st.plotly_chart(fig)

        elif graph_type == "Line Plot" and numerical_cols:
            x_axis = st.selectbox("Select X-axis (Time or Categorical)", df.columns)
            y_axis = st.selectbox("Select Y-axis (Numerical)", numerical_cols)
            fig = px.line(df, x=x_axis, y=y_axis, title=f"Line Plot of {y_axis} over {x_axis}")
            st.plotly_chart(fig)

        elif graph_type == "Scatter Plot" and len(numerical_cols) >= 2:
            x_axis = st.selectbox("Select X-axis", numerical_cols, index=0)
            y_axis = st.selectbox("Select Y-axis", numerical_cols, index=1)
            fig = px.scatter(df, x=x_axis, y=y_axis, title=f"Scatter Plot: {x_axis} vs {y_axis}")
            st.plotly_chart(fig)

        elif graph_type == "Histogram" and numerical_cols:
            column = st.selectbox("Select a Numerical Column", numerical_cols)
            fig = px.histogram(df, x=column, nbins=30, title=f"Histogram of {column}")
            st.plotly_chart(fig)
    except Exception as e:
        st.warning("‚ö†Ô∏è Unable to plot the selected graph. Please check your data selection.")