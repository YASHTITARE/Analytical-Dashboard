# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11JzQAh4WUHD66vN2GTpYM1ljw85y3b7E
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Set Streamlit Page Configuration
st.set_page_config(page_title="Data Analysis Dashboard", layout="wide")

# Sidebar Navigation
st.sidebar.title("📌 Navigation")
sections = [
    "1️⃣ Upload File",
    "2️⃣ Data Information",
    "3️⃣ Exploratory Data Analysis (EDA)"
]
selected_section = st.sidebar.radio("Go to:", sections)

# -------------------- 1️⃣ Upload File --------------------
if selected_section == "1️⃣ Upload File":
    st.title("📂 Upload Dataset")
    uploaded_file = st.file_uploader("Upload a CSV or Excel file", type=["csv", "xlsx"])

    if uploaded_file:
        file_extension = uploaded_file.name.split(".")[-1]
        if file_extension == "csv":
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        st.session_state["df"] = df  # Save dataset in session state
        st.success("✅ File Uploaded Successfully!")

# -------------------- Load Dataset (Persistent) --------------------
if "df" in st.session_state:
    df = st.session_state["df"]
else:
    df = None

# -------------------- 2️⃣ Data Information --------------------
if selected_section == "2️⃣ Data Information" and df is not None:
    st.title("📊 Dataset Overview")
    st.write("### 🔍 Data Preview:")
    st.dataframe(df.head())
    st.write(f"**📊 Shape:** {df.shape[0]} rows, {df.shape[1]} columns")
    st.write("**🔢 Column Data Types:")
    st.write(df.dtypes)
    st.write("**❗ Missing Values:")
    st.write(df.isnull().sum())

    st.write("### 🔍 Summary Statistics:")
    st.write(df.describe())

# -------------------- 3️⃣ Exploratory Data Analysis (EDA) --------------------
if selected_section == "3️⃣ Exploratory Data Analysis (EDA)" and df is not None:
    st.title("🔎 Exploratory Data Analysis")

    # Identify categorical and numerical columns
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()

    # Display column types
    st.write(f"📌 **Categorical Columns:** {categorical_cols}")
    st.write(f"📌 **Numerical Columns:** {numerical_cols}")