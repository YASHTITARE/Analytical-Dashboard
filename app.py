# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11JzQAh4WUHD66vN2GTpYM1ljw85y3b7E
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.preprocessing import LabelEncoder

# Set Streamlit Page Configuration
st.set_page_config(page_title="📊 Interactive Data Dashboard", layout="wide")

# Sidebar for File Upload
st.sidebar.header("📂 Upload Dataset")
uploaded_file = st.sidebar.file_uploader("Upload a CSV or Excel file", type=["csv", "xlsx"])

if uploaded_file is not None:
    file_extension = uploaded_file.name.split(".")[-1]

    try:
        df = pd.read_csv(uploaded_file) if file_extension == "csv" else pd.read_excel(uploaded_file)
        st.success("✅ File uploaded successfully!")
    except Exception as e:
        st.error(f"❌ Error in file processing: {e}")
        st.stop()

    # -------------------- EDA SECTION --------------------
    st.header("🔍 Exploratory Data Analysis (EDA)")

    # Show Dataset Preview
    st.subheader("📜 Dataset Preview")
    st.dataframe(df.head())

    # Dataset Shape
    st.write(f"**📊 Shape of Dataset:** {df.shape[0]} Rows, {df.shape[1]} Columns")

    # Data Types
    st.subheader("🔢 Data Types")
    st.write(df.dtypes)

    # Summary Statistics
    st.subheader("📈 Descriptive Statistics")
    st.write(df.describe())

    # Missing Values
    st.subheader("❗ Missing Values")
    st.write(df.isnull().sum())

    # Encoding Categorical Data
    categorical_cols = df.select_dtypes(include=['object']).columns
    numerical_cols = df.select_dtypes(include=['number']).columns

    if len(categorical_cols) > 0:
        st.subheader("🔄 Converting Categorical Columns to Numeric")
        encoder = LabelEncoder()
        for col in categorical_cols:
            df[col] = encoder.fit_transform(df[col])
        st.success("✅ Categorical columns converted successfully!")

    # -------------------- Dynamic Feature Selection --------------------
    st.header("📊 Data Visualization")

    graph_options = ["Histogram", "Boxplot", "Pie Chart", "Scatter Plot", "Correlation Heatmap"]
    selected_graph = st.selectbox("Select Graph Type", graph_options)

    # Dynamic feature selection
    column = st.selectbox("Select a Column for Visualization", df.columns)

    if selected_graph == "Histogram":
        if column in numerical_cols:
            st.write(f"### 📈 Histogram of {column}")
            fig = px.histogram(df, x=column, nbins=30, title=f"Distribution of {column}")
            st.plotly_chart(fig)
        else:
            st.warning("⚠️ Histogram can only be plotted for numerical columns!")

    elif selected_graph == "Boxplot":
        if column in numerical_cols:
            st.write(f"### 📊 Boxplot of {column}")
            fig = px.box(df, y=column, title=f"Boxplot of {column}")
            st.plotly_chart(fig)
        else:
            st.warning("⚠️ Boxplot can only be plotted for numerical columns!")

    elif selected_graph == "Pie Chart":
        if column in categorical_cols:
            st.write(f"### 🥧 Pie Chart of {column}")
            fig = px.pie(df, names=column, title=f"Proportion of {column}")
            st.plotly_chart(fig)
        else:
            st.warning("⚠️ Pie Chart can only be plotted for categorical columns!")

    elif selected_graph == "Scatter Plot":
        if len(numerical_cols) >= 2:
            x_axis = st.selectbox("Select X-axis", numerical_cols, index=0)
            y_axis = st.selectbox("Select Y-axis", numerical_cols, index=1)
            st.write(f"### 📌 Scatter Plot: {x_axis} vs {y_axis}")
            fig = px.scatter(df, x=x_axis, y=y_axis, title=f"Scatter Plot: {x_axis} vs {y_axis}")
            st.plotly_chart(fig)
        else:
            st.warning("⚠️ Scatter Plot requires at least two numerical columns!")

    elif selected_graph == "Correlation Heatmap":
        if len(numerical_cols) > 1:
            st.write("### 🔥 Correlation Heatmap")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.heatmap(df[numerical_cols].corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
            st.pyplot(fig)
        else:
            st.warning("⚠️ Correlation Heatmap requires multiple numerical columns!")

    # -------------------- Time-Series Analysis --------------------
    if "date" in df.columns or "Date" in df.columns:
        date_column = "date" if "date" in df.columns else "Date"
        try:
            df[date_column] = pd.to_datetime(df[date_column])
            df.set_index(date_column, inplace=True)

            st.header("📅 Time-Series Analysis")
            time_series_col = st.selectbox("Select Column for Time-Series Analysis", numerical_cols)

            st.write(f"### 📊 Trend Analysis of {time_series_col}")
            fig = px.line(df, x=df.index, y=time_series_col, title=f"Trend Analysis of {time_series_col}")
            st.plotly_chart(fig)
        except Exception as e:
            st.warning(f"⚠️ Time-Series Analysis Failed: {e}")

    # -------------------- Download Processed Data --------------------
    st.write("### 📥 Download Processed Data")
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("Download Processed CSV", csv, "processed_data.csv", "text/csv")