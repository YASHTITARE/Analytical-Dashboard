# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11JzQAh4WUHD66vN2GTpYM1ljw85y3b7E
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Set Streamlit Page Configuration
st.set_page_config(page_title="Data Analysis Dashboard", layout="wide")

# Sidebar Navigation
st.sidebar.title("üìå Navigation")
sections = [
    "1Ô∏è‚É£ Upload File",
    "2Ô∏è‚É£ Understand Data",
    "3Ô∏è‚É£ Data Info",
    "4Ô∏è‚É£ Exploratory Data Analysis (EDA)",
    "5Ô∏è‚É£ Basic Graphs",
    "6Ô∏è‚É£ Correlation Heatmap",
    "7Ô∏è‚É£ Pair Plot",
    "8Ô∏è‚É£ Histogram",
    "9Ô∏è‚É£ Geospatial Analysis"
]
selected_section = st.sidebar.radio("Go to:", sections)

# -------------------- 1Ô∏è‚É£ Upload File --------------------
if selected_section == "1Ô∏è‚É£ Upload File":
    st.title("üìÇ Upload Dataset")
    uploaded_file = st.file_uploader("Upload a CSV or Excel file", type=["csv", "xlsx"])

    if uploaded_file:
        file_extension = uploaded_file.name.split(".")[-1]
        if file_extension == "csv":
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        st.session_state["df"] = df  # Save dataset in session state
        st.success("‚úÖ File Uploaded Successfully!")

# -------------------- Load Dataset (Persistent) --------------------
if "df" in st.session_state:
    df = st.session_state["df"]
else:
    df = None

# -------------------- 2Ô∏è‚É£ Understand Data --------------------
if selected_section == "2Ô∏è‚É£ Understand Data" and df is not None:
    st.title("üìä Dataset Overview")
    st.write("### üîç Data Preview:")
    st.dataframe(df.head())
    st.write(f"**üìä Shape:** {df.shape[0]} rows, {df.shape[1]} columns")
    st.write("**üî¢ Column Data Types:**")
    st.write(df.dtypes)
    st.write("**‚ùó Missing Values:**")
    st.write(df.isnull().sum())

# -------------------- 3Ô∏è‚É£ Data Info --------------------
if selected_section == "3Ô∏è‚É£ Data Info" and df is not None:
    st.title("üìÑ Data Information")
    st.write("### üîç Summary Statistics:")
    st.write(df.describe())

    st.write("### üîÑ Unique Values per Column:")
    for col in df.columns:
        st.write(f"**{col}:** {df[col].nunique()} unique values")

# -------------------- 4Ô∏è‚É£ Exploratory Data Analysis (EDA) --------------------
if selected_section == "4Ô∏è‚É£ Exploratory Data Analysis (EDA)" and df is not None:
    st.title("üîé Exploratory Data Analysis")

    # Identify categorical and numerical columns
    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()

    # Display column types
    st.write(f"üìå **Categorical Columns:** {categorical_cols}")
    st.write(f"üìå **Numerical Columns:** {numerical_cols}")

# -------------------- 5Ô∏è‚É£ Basic Graphs (Without Dynamic Feature Selection) --------------------
if selected_section == "5Ô∏è‚É£ Basic Graphs" and df is not None:
    st.title("üìà Basic Graphs")

    categorical_cols = df.select_dtypes(include=['object']).columns.tolist()
    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()

    # Bar Chart (For Categorical Columns)
    if categorical_cols:
        st.write("### üìä Bar Chart")
        col = categorical_cols[0]
        fig = px.bar(df[col].value_counts().reset_index(), x="index", y=col, title=f"Bar Chart of {col}")
        st.plotly_chart(fig)

    # Boxplot (For Numerical Columns)
    if numerical_cols:
        st.write("### üì¶ Boxplot")
        col = numerical_cols[0]
        fig = px.box(df, y=col, title=f"Boxplot of {col}")
        st.plotly_chart(fig)

# -------------------- 6Ô∏è‚É£ Correlation Heatmap (With Dynamic Feature Selection) --------------------
if selected_section == "6Ô∏è‚É£ Correlation Heatmap" and df is not None:
    st.title("üî• Correlation Heatmap")

    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()
    selected_columns = st.multiselect("Select Columns for Correlation Heatmap", numerical_cols, default=numerical_cols[:2])

    if len(selected_columns) > 1:
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.heatmap(df[selected_columns].corr(), annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
        st.pyplot(fig)
    else:
        st.warning("‚ö†Ô∏è Please select at least two numerical columns!")

# -------------------- 7Ô∏è‚É£ Pair Plot (With Dynamic Feature Selection) --------------------
if selected_section == "7Ô∏è‚É£ Pair Plot" and df is not None:
    st.title("üìä Pair Plot")

    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()
    selected_columns = st.multiselect("Select Columns for Pair Plot", numerical_cols, default=numerical_cols[:2])

    if len(selected_columns) > 1:
        fig = sns.pairplot(df[selected_columns])
        st.pyplot(fig)
    else:
        st.warning("‚ö†Ô∏è Please select at least two numerical columns!")

# -------------------- 8Ô∏è‚É£ Histogram (With Dynamic Feature Selection) --------------------
if selected_section == "8Ô∏è‚É£ Histogram" and df is not None:
    st.title("üìà Histogram")

    numerical_cols = df.select_dtypes(include=['number']).columns.tolist()
    column = st.selectbox("Select a Numerical Column", numerical_cols)

    fig = px.histogram(df, x=column, nbins=30, title=f"Distribution of {column}")
    st.plotly_chart(fig)

# -------------------- 9Ô∏è‚É£ Geospatial Analysis --------------------
if selected_section == "9Ô∏è‚É£ Geospatial Analysis" and df is not None:
    st.title("üåç Geospatial Analysis")

    # Identify potential latitude and longitude columns
    lat_cols = [col for col in df.columns if "lat" in col.lower()]
    lon_cols = [col for col in df.columns if "lon" in col.lower() or "long" in col.lower()]

    if lat_cols and lon_cols:
        lat_col = st.selectbox("Select Latitude Column", lat_cols)
        lon_col = st.selectbox("Select Longitude Column", lon_cols)
        st.map(df[[lat_col, lon_col]].dropna())
    else:
        st.warning("‚ö†Ô∏è No latitude/longitude columns found in the dataset!")